{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"plot",
				"plot_density"
			],
			[
				"ene",
				"set_energy_func"
			],
			[
				"opt",
				"opt_param"
			],
			[
				"in",
				"set_initial_guess"
			],
			[
				"new",
				"new_pos"
			],
			[
				"ne",
				"new_pos"
			],
			[
				"dr",
				"drift_func"
			],
			[
				"walkers",
				"walkers"
			],
			[
				"index",
				"index_dead"
			],
			[
				"nw",
				"nwalkers"
			],
			[
				"func",
				"func_el"
			],
			[
				"step",
				"step_size"
			],
			[
				"ste",
				"step_size"
			],
			[
				"sum",
				"sum_grad_output"
			],
			[
				"el",
				"elementwise_grad"
			],
			[
				"p",
				"param"
			],
			[
				"ki",
				"kinetic_manual"
			],
			[
				"par",
				"parameters"
			],
			[
				"grad",
				"grad_psi"
			],
			[
				"py",
				"pyCHAMP"
			],
			[
				"Hqp",
				"hqp_mat"
			],
			[
				"Set",
				"SetupHt"
			],
			[
				"dvid",
				"davidson_mf"
			],
			[
				"time",
				"time_singlet"
			],
			[
				"davidson",
				"davidson_mf"
			],
			[
				"set",
				"set_diag"
			],
			[
				"_ei",
				"_eigenvalues"
			],
			[
				"foldr",
				"folder_name"
			],
			[
				"folder",
				"folder_name"
			],
			[
				"MA",
				"MAX"
			],
			[
				"size",
				"size_update"
			],
			[
				"sze",
				"size_update"
			],
			[
				"davds",
				"davidson_update"
			],
			[
				"Matrix",
				"MatrixXd"
			],
			[
				"_eig",
				"_eigenvectors"
			],
			[
				"eig",
				"eigenvalues"
			],
			[
				"iter",
				"iter_max"
			],
			[
				"old",
				"old_dim"
			],
			[
				"Ma",
				"MatrixReplacement"
			],
			[
				"M",
				"MatrixXd"
			],
			[
				"_tmp",
				"_tmp_val"
			],
			[
				"MAr",
				"MatrixXd"
			],
			[
				"cos",
				"conservativeResize"
			],
			[
				"max",
				"maxCoeff"
			],
			[
				"tr",
				"_trash"
			],
			[
				"compare",
				"compare_time"
			],
			[
				"mol",
				"molname"
			],
			[
				"per",
				"percent_converged"
			],
			[
				"root",
				"root_converged"
			],
			[
				"res",
				"res_norm"
			],
			[
				"reor",
				"reorder_coeffs"
			],
			[
				"blo",
				"block"
			],
			[
				"_co",
				"_coeff_Hd2"
			],
			[
				"Triplet",
				"Triplet_TDA"
			],
			[
				"Sin",
				"Singlet_TDA"
			],
			[
				"coef",
				"_coeff_Hqp"
			],
			[
				"BE",
				"BSE_OPERATOR"
			],
			[
				"_",
				"_dpr_correction"
			],
			[
				"matrix",
				"matrixfree"
			],
			[
				"matri",
				"matrixfree"
			],
			[
				"Dav",
				"DavidsonSolver"
			],
			[
				"da",
				"davidson_correction"
			],
			[
				"david",
				"davidson_correction"
			],
			[
				"N",
				"N"
			],
			[
				"dav",
				"davidson_solver"
			],
			[
				"dia",
				"digaonal_dominant"
			],
			[
				"V",
				"V"
			],
			[
				"jocc",
				"jocc_linsolve"
			],
			[
				"Ht",
				"Ht"
			],
			[
				"BSE_",
				"BSE_OPERATOR"
			],
			[
				"_coe",
				"_coeff_Hd2"
			],
			[
				"ve",
				"VectorXd"
			],
			[
				"get",
				"get_full_matrix"
			],
			[
				"_eigen",
				"_eigenvectors"
			],
			[
				"e",
				"eigenvectors"
			],
			[
				"Vec",
				"VectorXd"
			],
			[
				"_bse",
				"_bse_singlet_coefficients"
			],
			[
				"solve",
				"solve_hermitian"
			],
			[
				"martix",
				"MatrixXfd"
			],
			[
				"vect",
				"VectorXfd"
			],
			[
				"_o",
				"_orbitals"
			],
			[
				"BSE",
				"BSE_Triplets"
			],
			[
				"vector",
				"VectorXd"
			],
			[
				"search",
				"search_space"
			],
			[
				"_bse_",
				"_bse_triplet_energies"
			],
			[
				"ei",
				"eigenvalues"
			],
			[
				"Matr",
				"MatrixFreeOperator"
			],
			[
				"Mtrix",
				"MatrixFreeOperator"
			],
			[
				"Davidos",
				"DavidsonOperator"
			],
			[
				"Davids",
				"DavidsonOperator"
			],
			[
				"Da",
				"DavidsonSolver"
			],
			[
				"Dense",
				"DenseShape"
			],
			[
				"Dens",
				"DenseShape"
			],
			[
				"A",
				"AliasFreeProduct"
			],
			[
				"OpS",
				"OpSizeVal"
			],
			[
				"comm",
				"commSize"
			],
			[
				"real",
				"real_gwbse"
			],
			[
				"x",
				"x"
			],
			[
				"Mt",
				"Matrix3d"
			]
		]
	},
	"buffers":
	[
		{
			"file": "pyCHAMP/sampler/walkers.py",
			"settings":
			{
				"buffer_size": 1866,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/wavefunction/wf_base.py",
			"settings":
			{
				"buffer_size": 5974,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/optimizer/opt_base.py",
			"settings":
			{
				"buffer_size": 146,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/nicolas/Documents/tutorial/pyhmc/test.py",
			"settings":
			{
				"buffer_size": 392,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/optimizer/linear.py",
			"settings":
			{
				"buffer_size": 2547,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/sampler/metropolis.py",
			"settings":
			{
				"buffer_size": 1642,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import numpy as np\nfrom pyCHAMP.sampler.sampler_base import SAMPLER_BASE\n\n\nclass DIFFUSION(SAMPLER_BASE):\n\n    def __init__(self, nwalkers=1000, nstep=1000, nelec=1, ndim=3, \n                 step_size = 0.1, domain = {'min':-2,'max':2},\n                 move='all'):\n\n        ''' Diffusion  SAMPLER\n        Args:\n            f (func) : function to sample\n            nstep (int) : number of mc step\n            nwalkers (int) : number of walkers\n            eps (float) : size of the mc step\n            boudnary (float) : boudnary of the space\n        '''\n\n        SAMPLER_BASE.__init__(self,nwalkers,nstep,nelec,ndim,step_size,domain,move)\n\n\n    def set_wf(self,func):\n        self.wf = func\n\n    def set_drift_func(self,func):\n        self.drift_func = func\n\n    def set_energy_func(self,func):\n        self.energy_func = func\n\n    def set_initial_guess(self,pos):\n        self.init_pos = pos\n\n    def generate(self):\n\n        self.walkers.initialize(pos=self.init_pos)\n\n        Ex = self.energy_func(self.walkers.pos)\n        E = np.mean(Ex)\n\n        for istep in range(self.nstep):\n\n            # drift force\n            F = self.drift_func(self.walkers.pos)\n\n            old_pos = self.walkers.pos\n            old_wf = self.wf(old_pos)\n\n            for ielec in range(self.walkers.nelec):\n\n                # proposed move\n                new_pos = self.walkers.move_dmc(self.step_size,F,ielec)\n\n                # wf values\n                new_wf = self.wf(new_pos)    \n                \n                # fixed node\n                FN = np.sign(new_wf) * np.sign(old_wf) \n\n                #weight\n                W = self.weight( new_pos,new_wf,old_pos,old_wf,E )\n                W *= FN\n\n                # accept the moves\n                index = self._accept(W)\n                self.walkers.pos[index,:] = new_pos[index,:]\n\n            # new local energies\n            Exn = self.energy_func(self.walkers.pos)\n\n            # update the walkers\n            self.walkers_death_birth(Exn,Ex,E)\n\n            # update total energy\n            Ex = self.energy_func(self.walkers.pos)\n            E = np.mean(Ex)\n\n        return self.walkers.pos\n\n    def weight(self,new_pos,new_wf,old_pos,old_wf,E):\n        return (new_wf**2 * self.green(new_pos,old_pos,E)) / ( (old_wf**2 * self.green(old_pos,new_pos,E)) + 1E-6 ) \n        \n\n\n    def green(self,rn,r,E):\n        en = self.energy_func(rn)\n        e = self.energy_func(r)\n        Gb = np.exp(-0.5*(en+e-2*E)*self.step_size)\n        Gd = (2*np.pi*self.step_size)**(-3/2*self.nwalkers) *np.exp( -0.5*(r-rn-0.5*self.step_size*self.drift_func(rn)/self.step_size ) )\n        return Gb*Gd\n\n\n    def _accept(self,df):\n        ones = np.ones((self.walkers.nwalkers,1))\n        P = np.minimum(ones,df)\n        tau = np.random.rand(self.walkers.nwalkers,1)\n        return (P-tau>=0).reshape(-1)\n\n\n\n    def walkers_death_birth(self,Exn,Ex,E):\n\n        # number of each walker\n        N = np.exp(-0.5*self.step_size*(Ex+Exn-2*E)).astype('int')\n\n        # kill the walkers\n        index_dead = np.where(N==0)[0]\n        num_dead = len(index_dead)\n        self.walkers.status[index_dead] = 0\n\n        # multiply walkers\n        index_birth = np.where(N>1)[0]\n        num_new = len(index_birth)\n        new_pos = self.walkers.pos[index_birth,:]\n\n        # track number of walkers\n        self.walkers.nwalkers += num_new - num_dead\n        print(self.walkers.nwalkers)\n        \n        # remove dead walkers\n        self.walkers.status = np.delete(self.walkers.status,index_dead,axis=0)\n        self.walkers.pos = np.delete(self.walkers.pos,index_dead,axis=0)\n        \n        #add copies\n        self.walkers.status = np.concatenate((self.walkers.status,np.ones((num_new,1))))\n        self.walkers.pos = np.vstack((self.walkers.pos,new_pos))\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"file": "pyCHAMP/sampler/diffusion.py",
			"file_size": 3845,
			"file_write_time": 132006054331731934,
			"settings":
			{
				"buffer_size": 3802,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/solver/vmc.py",
			"settings":
			{
				"buffer_size": 366,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/solver/solver_base.py",
			"settings":
			{
				"buffer_size": 2010,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import autograd.numpy as np\n\nfrom pyCHAMP.wavefunction.wf_base import WF\nfrom pyCHAMP.sampler.metropolis import METROPOLIS\nfrom pyCHAMP.optimizer.minimize import MINIMIZE\nfrom pyCHAMP.solver.vmc import VMC\n\nclass HarmOsc3D(WF):\n\n\tdef __init__(self,nelec,ndim):\n\t\tWF.__init__(self, nelec, ndim)\n\n\tdef values(self,parameters,pos):\n\t\t''' Compute the value of the wave function.\n\n\t\tArgs:\n\t\t\tparameters : variational param of the wf\n\t\t\tpos: position of the electron\n\n\t\tReturns: values of psi\n\t\t# '''\n\t\t# if pos.shape[1] != self.ndim :\n\t\t# \traise ValueError('Position have wrong dimension')\n\n\t\tbeta = parameters[0]\n\t\treturn np.exp(-beta*np.sum(pos**2,1)).reshape(-1,1)\n\n\tdef nuclear_potential(self,pos):\n\t\treturn np.sum(0.5*pos**2,1).reshape(-1,1)\n\n\tdef electronic_potential(self,pos):\n\t\treturn 0\n\n\nif __name__ == \"__main__\":\n\n\t\n\twf = HarmOsc3D(nelec=1, ndim=3)\n\tsampler = METROPOLIS(nwalkers=1000, nstep=1000, step_size=3, nelec=1, ndim=3, domain = {'min':-2,'max':2})\n\toptimizer = MINIMIZE(method='bfgs', maxiter=20, tol=1E-4)\n\n\t# VMC solver\n\tvmc = VMC(wf=wf, sampler=sampler, optimizer=optimizer)\n\n\t# single point\n\topt_param = [0.5]\n\tpos,e,s = vmc.single_point(opt_param)\n\tprint('Energy   : ', e)\n\tprint('Variance : ', s)\n\tvmc.plot_density(pos)\n\n\t# optimiztaion\n\tinit_param = [0.25]\n\tvmc.optimize(init_param)\n\tvmc.plot_history()\n\n\n",
			"file": "example/ho3d.py",
			"file_size": 1400,
			"file_write_time": 132006660119566940,
			"settings":
			{
				"buffer_size": 1328,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/sampler/sampler_base.py",
			"settings":
			{
				"buffer_size": 693,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "example/sand_box.py",
			"settings":
			{
				"buffer_size": 2245,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/sampler/hamiltonian.py",
			"settings":
			{
				"buffer_size": 2055,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "import numpy as np"
			}
		},
		{
			"file": "pyCHAMP/optimizer/minimize.py",
			"settings":
			{
				"buffer_size": 557,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/solver/dmc.py",
			"settings":
			{
				"buffer_size": 569,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import autograd.numpy as np \nfrom autograd import grad\nfrom autograd import elementwise_grad as egrad\nfrom autograd import hessian, jacobian\nfrom functools import partial\n\n# def f(x):\n#   return np.prod(np.exp(-x**2),1)\n\n# def f(param,pos):\n#   b = param[0]\n#   return np.prod(np.exp(-b*pos**2),1)\n \ndef f(param,pos):\n    assert param.ndim == 1\n    assert pos.ndim == 1\n    return np.prod(pos**2)\n\ndef kinetic(f,param,pos):\n    h = hessian(f,1)\n    eg = np.array([np.diag(h(param,p)) for p in pos])\n    return eg\n\ndef kinetic_manual(f,param,pos):\n    x,y,z = pos[:,0], pos[:,1], pos[:,2]\n    d2x = 2 * y**2 * z**2\n    d2y = 2 * x**2 * z**2\n    d2z = 2 * x**2 * y**2\n    return np.vstack((d2x,d2y,d2z)).T\n\n\ndef elementwise_hess(fun,argnum=0):\n    sum_latter_dims = lambda x : np.sum(x.reshape(x.shape[0],-1),1)\n    def sum_grad_output(*args,**kwargs):\n        return sum_latter_dims(egrad(fun)(*args,**kwargs))\n    return jacobian(sum_grad_output,argnum)\n\n\npos = np.random.rand(10,3)\nparam = np.array([0.5])\n\nv = np.array([f(param,p) for p in pos])\nk = kinetic(f,param,pos)\nkm = kinetic_manual(f,param,pos)\nprint(k-km)\n\n\n\n",
			"file": "/home/nicolas/Documents/tutorial/autograd/test.py",
			"file_size": 1119,
			"file_write_time": 132004998453902415,
			"settings":
			{
				"buffer_size": 1121,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"clan",
				"Clang Format: Format Selection"
			],
			[
				"cla",
				"Clang Format: Format Selection"
			],
			[
				"cl",
				"Clang Format: Format Selection"
			],
			[
				"CL",
				"Clang Format: Format Selection"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/nicolas/Documents/projects/QMC/pyCHAMP",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction"
	],
	"file_history":
	[
		"/home/nicolas/Documents/tutorial/pyMC3/test.py",
		"/home/nicolas/Documents/tutorial/pyMC3/tesa",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/vmc/vmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/dmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/vmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/ho3d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/dmc/dmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/diffuser/diffuser.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/test.py",
		"/home/nicolas/Documents/projects/xtp_benchmark/geometries_tol_normal_update_safe_matrix_free/read_mem.py",
		"/home/nicolas/Documents/projects/votca/tools/include/votca/tools/property.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/qmstate.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/matrixfreeoperator.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/davidsonsolver.cc",
		"/home/nicolas/Documents/projects/xtp-tutorials/tools/dftgwbse_CH4/run.sh",
		"/home/nicolas/Documents/projects/xtp_benchmark/geometries_tol_normal_update_full/unsaturated_aliphatic_hydrocarbons/ethene/dftgwbse_davidson.log",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bse.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/gwbse.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/aobasis.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/matrixfreeoperator.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/orbitals.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/gwbse.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/tests/test_davidson.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/tests/test_bse.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/eigen.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/tests/test_bse_operator.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/tests/CMakeLists.txt",
		"/home/nicolas/Documents/projects/votca/ctp/src/libctp/toolfactory.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/tools/densityanalysis.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/tools/coupling.h",
		"/home/nicolas/Documents/projects/votca/xtp/share/packages/mbgft.xml",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bse_operator.cc",
		"/home/nicolas/Documents/projects/votca/xtp/README.md",
		"/home/nicolas/Documents/projects/votca/xtp/CODE_OF_CONDUCT.md",
		"/home/nicolas/Documents/projects/votca/xtp/CHANGELOG.md",
		"/home/nicolas/Documents/projects/votca/xtp/scripts/xtp_basisset.in",
		"/home/nicolas/Documents/projects/votca/build/xtp/scripts/xtp_makeauxbasis",
		"/home/nicolas/Documents/projects/votca/build/xtp/scripts/xtp_update_exciton",
		"/home/nicolas/Documents/projects/votca/xtp/.travis.yml",
		"/home/nicolas/Documents/projects/votca/xtp/.gitlab-ci.yml",
		"/home/nicolas/Documents/projects/votca/CMakeLists.txt",
		"/home/nicolas/Documents/projects/votca/xtp/CMakeLists.txt",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/tools/excitoncoupling.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/tools/gencube.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/CMakeLists.txt",
		"/home/nicolas/Documents/projects/PINNs/main/continuous_time_inference (Schrodinger)/Schrodinger.py",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/test_operator.h",
		"/home/nicolas/Documents/projects/votca/csg/.codecov.yml",
		"/home/nicolas/Documents/projects/votca/csg/.gitlab-ci.yml",
		"/home/nicolas/Documents/projects/votca/xtp/scripts/xtp_makeauxbasis.in",
		"/home/nicolas/Documents/projects/votca/xtp/scripts/xtp_update_exciton.in",
		"/home/nicolas/Documents/projects/votca/xtp/src/tools/CMakeLists.txt",
		"/home/nicolas/Documents/projects/xtp_benchmark/geometries/unsaturated_aliphatic_hydrocarbons/ethene_test/run.sh",
		"/home/nicolas/Documents/projects/xtp_benchmark/read_data.py",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/src/DavidsonSolver.cpp",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/src/DavidsonSolver.hpp",
		"/home/nicolas/Documents/projects/champ/vmc/regterg.f90",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/python/davidson",
		"/home/nicolas/Documents/projects/votca/CMakeModules/BuildModules.cmake",
		"/home/nicolas/Documents/projects/votca/CMakeModules/FileExists.cmake",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/src/main.cpp",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/src/DavidsonOperator.hpp",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/src/DavidsonOperator.cpp",
		"/home/nicolas/Documents/projects/xtp_benchmark/geometries/nucleobases/adenine_test/run.sh",
		"/proc/sys/kernel/perf_event_paranoid",
		"/home/nicolas/Documents/projects/LinearSystem/CG/python/cg.py",
		"/home/nicolas/Documents/projects/votca/xtp/src/tests/test_bse_davidson.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bse.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/tests/test_adiis.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/orbitals.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bse_engine.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bse_engine.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/tools/dftgwbse.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/jobcalculators/eqm.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bse_singlet.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bse_triplet.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bse_singlet.cc",
		"/home/nicolas/votca/share/votca/xtp/packages/mbgft.xml",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bse_triplet.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bse_operator.h",
		"/home/nicolas/Documents/projects/votca/tools/src/libtools/linalg.cc",
		"/home/nicolas/Documents/projects/votca/tools/include/votca/tools/eigen.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/checkpointwriter.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/vc2index.h",
		"/home/nicolas/Documents/projects/votca/ctp/src/libctp/linalg.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bseoperator.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bse_matrix_free.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bse_matrix_free.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/davidsonsolver.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bseoperator.cpp",
		"/home/nicolas/Documents/projects/xtp-tutorials/tools/dftgwbse_CH4/dftgwbse.xml",
		"/home/nicolas/Documents/projects/xtp-tutorials/tools/dftgwbse_CH4/mbgft.xml",
		"/home/nicolas/Documents/projects/votca/tools/src/libtools/random2.cc",
		"/home/nicolas/Documents/projects/EigenValues/LOBPCG/python/lobpcg.py",
		"/home/nicolas/Documents/projects/votca/tools/src/libtools/matrixfreeoperator.cc",
		"/home/nicolas/Documents/projects/votca/tools/include/votca/tools/davidsonsolver.h",
		"/home/nicolas/Documents/projects/votca/tools/include/votca/tools/matrixfreeoperator.h",
		"/home/nicolas/Documents/projects/votca/tools/src/libtools/davidsonsolver.cc",
		"/home/nicolas/Documents/projects/votca/tools/include/votca/tools/davidsonoperator.h",
		"/home/nicolas/Documents/projects/votca/tools/src/libtools/davidsonoperator.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bse_matrixfree.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bse_matrixfree.h",
		"/home/nicolas/Documents/projects/votca/tools/include/votca/tools/random2.h",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/dev/matrix_free_interface/test.cpp",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/dev/matrix_free_interface/Makefile",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/gwbseengine.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/gwbseengine.cc",
		"/home/nicolas/Documents/projects/gBenchLinAlg/results/diag/plot_performance.py",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/dftengine/dftengine.cc",
		"/home/nicolas/Documents/projects/EigenValues/JacobiDavidson/pyhton/jacobiDavidson.py",
		"/home/nicolas/Documents/projects/DavidsonSolverEigen/eigen.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/rpa.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/tools/elmpi.h",
		"/home/nicolas/Documents/projects/votca/ctp/include/votca/ctp/orbitals.h",
		"/home/nicolas/Documents/projects/votca/tools/include/votca/tools/constants.h",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/DavidsonSolver.hpp",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/DavidsonSolver.cpp",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/tools/dftgwbse.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/tools/xtp_tools.cc",
		"/home/nicolas/Documents/projects/votca/ctp/include/votca/ctp/logger.h",
		"/home/nicolas/Documents/projects/votca/ctp/include/votca/kmc/kmcapplication.h",
		"/home/nicolas/Documents/projects/votca/ctp/src/libkmc/kmcapplication.cc",
		"/home/nicolas/Documents/projects/xtp-tutorials/tools/dftgwbse_CH4/methane.xyz",
		"/home/nicolas/Documents/projects/xtp-tutorials/guide/README.md",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/CMakeLists.txt",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/diis.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/adiis.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/threecenter_gwbse.cc"
	],
	"find":
	{
		"height": 22.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"value(",
			"self.parameters"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pyCHAMP/sampler/walkers.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1866,
						"regions":
						{
						},
						"selection":
						[
							[
								1765,
								1765
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 56.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pyCHAMP/wavefunction/wf_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5974,
						"regions":
						{
						},
						"selection":
						[
							[
								859,
								859
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 105.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "pyCHAMP/optimizer/opt_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 146,
						"regions":
						{
						},
						"selection":
						[
							[
								138,
								138
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/nicolas/Documents/tutorial/pyhmc/test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 392,
						"regions":
						{
						},
						"selection":
						[
							[
								115,
								115
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pyCHAMP/optimizer/linear.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2547,
						"regions":
						{
						},
						"selection":
						[
							[
								2484,
								2484
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 468.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "pyCHAMP/sampler/metropolis.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1642,
						"regions":
						{
						},
						"selection":
						[
							[
								629,
								629
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "pyCHAMP/sampler/diffusion.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3802,
						"regions":
						{
						},
						"selection":
						[
							[
								579,
								579
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "pyCHAMP/solver/vmc.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 366,
						"regions":
						{
						},
						"selection":
						[
							[
								349,
								349
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "pyCHAMP/solver/solver_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2010,
						"regions":
						{
						},
						"selection":
						[
							[
								690,
								690
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 78.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "example/ho3d.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1328,
						"regions":
						{
						},
						"selection":
						[
							[
								207,
								207
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		},
		{
			"selected": 9,
			"sheets":
			[
				{
					"buffer": 10,
					"file": "pyCHAMP/sampler/sampler_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 693,
						"regions":
						{
						},
						"selection":
						[
							[
								693,
								693
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "pyCHAMP/optimizer/opt_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 146,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "pyCHAMP/solver/vmc.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 366,
						"regions":
						{
						},
						"selection":
						[
							[
								363,
								363
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "pyCHAMP/solver/solver_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2010,
						"regions":
						{
						},
						"selection":
						[
							[
								1775,
								1775
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 195.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "example/sand_box.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2245,
						"regions":
						{
						},
						"selection":
						[
							[
								916,
								916
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "pyCHAMP/sampler/hamiltonian.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2055,
						"regions":
						{
						},
						"selection":
						[
							[
								16,
								16
							]
						],
						"settings":
						{
							"auto_name": "import numpy as np",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "pyCHAMP/sampler/metropolis.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1642,
						"regions":
						{
						},
						"selection":
						[
							[
								629,
								629
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "pyCHAMP/sampler/diffusion.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3802,
						"regions":
						{
						},
						"selection":
						[
							[
								73,
								73
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "pyCHAMP/optimizer/minimize.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 557,
						"regions":
						{
						},
						"selection":
						[
							[
								557,
								557
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "example/sand_box.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2245,
						"regions":
						{
						},
						"selection":
						[
							[
								665,
								665
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pyCHAMP/wavefunction/wf_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5974,
						"regions":
						{
						},
						"selection":
						[
							[
								1542,
								1542
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "pyCHAMP/solver/dmc.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 569,
						"regions":
						{
						},
						"selection":
						[
							[
								555,
								555
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "example/ho3d.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1328,
						"regions":
						{
						},
						"selection":
						[
							[
								28,
								28
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/home/nicolas/Documents/tutorial/autograd/test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1121,
						"regions":
						{
						},
						"selection":
						[
							[
								489,
								489
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.476665281068,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 72.0
	},
	"pinned_build_system": "",
	"project": "pychamp.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"so",
				"pyCHAMP/solver/solver_base.py"
			],
			[
				"ho3",
				"example/ho3d.py"
			],
			[
				"wf",
				"pyCHAMP/wavefunction/wf_base.py"
			],
			[
				"mini",
				"pyCHAMP/optimizer/minimize.py"
			],
			[
				"op",
				"pyCHAMP/optimizer/opt_base.py"
			],
			[
				"solve",
				"pyCHAMP/solver/solver_base.py"
			],
			[
				"vm",
				"pyCHAMP/solver/vmc.py"
			],
			[
				"metr",
				"pyCHAMP/sampler/metropolis.py"
			],
			[
				"di",
				"pyCHAMP/sampler/diffusion.py"
			],
			[
				"sam",
				"pyCHAMP/sampler/sampler_base.py"
			],
			[
				"ho1",
				"example/ho1d.py"
			],
			[
				"h",
				"example/ho3d.py"
			],
			[
				"test_bse",
				"xtp/src/tests/test_bse.cc"
			],
			[
				"",
				"xtp/src/tests/test_bse_operator.cc"
			],
			[
				"davids",
				"xtp/include/votca/xtp/davidsonsolver.h"
			],
			[
				"da",
				"xtp/src/libxtp/davidsonsolver.cc"
			],
			[
				"bse.cc",
				"xtp/src/libxtp/gwbse/bse.cc"
			],
			[
				"qmsta",
				"xtp/include/votca/xtp/qmstate.h"
			],
			[
				"bse.c",
				"xtp/src/libxtp/gwbse/bse.cc"
			],
			[
				"orbitals",
				"ctp/include/votca/ctp/orbitals.h"
			],
			[
				"test_d",
				"xtp/src/tests/test_davidson.cc"
			],
			[
				"dav",
				"xtp/include/votca/xtp/davidsonsolver.h"
			],
			[
				"test_bs",
				"xtp/src/tests/test_bse_operator.cc"
			],
			[
				"matr",
				"xtp/src/libxtp/matrixfreeoperator.cc"
			],
			[
				"test",
				"xtp/src/tests/test_bse.cc"
			],
			[
				"gw",
				"xtp/src/libxtp/gwbse/gwbse.cc"
			],
			[
				"bse",
				"xtp/include/votca/xtp/bse.h"
			],
			[
				"bse_op",
				"xtp/include/votca/xtp/bse_operator.h"
			],
			[
				"bse_",
				"xtp/src/libxtp/gwbse/bse_operator.cc"
			],
			[
				"test_",
				"xtp/src/tests/test_bse.cc"
			],
			[
				"bse.h",
				"xtp/include/votca/xtp/bse.h"
			],
			[
				"test_d\t",
				"xtp/src/tests/test_davidson.cc"
			],
			[
				"bse.",
				"xtp/src/libxtp/gwbse/bse.cc"
			],
			[
				"matri",
				"xtp/include/votca/xtp/matrixfreeoperator.h"
			],
			[
				"bse_o",
				"xtp/include/votca/xtp/bse_operator.h"
			],
			[
				".cod",
				"csg/.codecov.yml"
			],
			[
				"exc",
				"xtp/src/libxtp/tools/excitoncoupling.h"
			],
			[
				"den",
				"xtp/src/libxtp/tools/densityanalysis.h"
			],
			[
				"xtp_up",
				"build/xtp/scripts/xtp_update_exciton"
			],
			[
				"xtp_ma",
				"build/xtp/scripts/xtp_makeauxbasis"
			],
			[
				"xtp_bas",
				"xtp/scripts/xtp_basisset.in"
			],
			[
				".gitla",
				"csg/.gitlab-ci.yml"
			],
			[
				".cove",
				"csg/.codecov.yml"
			],
			[
				"gen",
				"xtp/src/libxtp/tools/gencube.h"
			],
			[
				"exci",
				"xtp/src/libxtp/tools/excitoncoupling.h"
			],
			[
				"too",
				"ctp/src/libctp/toolfactory.cc"
			],
			[
				"dens",
				"xtp/src/libxtp/tools/densityanalysis.h"
			],
			[
				"gwbse",
				"xtp/src/libxtp/gwbse/gwbse.cc"
			],
			[
				"david",
				"xtp/include/votca/xtp/davidsonsolver.h"
			],
			[
				"davidso",
				"xtp/include/votca/xtp/davidsonsolver.h"
			],
			[
				"gwbs",
				"xtp/src/libxtp/gwbse/gwbse.cc"
			],
			[
				"eig",
				"xtp/include/votca/xtp/eigen.h"
			],
			[
				"bse_ope",
				"xtp/include/votca/xtp/bse_operator.h"
			],
			[
				"mb",
				"xtp/share/packages/mbgft.xml"
			],
			[
				"bse_tri",
				"xtp/src/libxtp/gwbse/bse_triplet.cc"
			],
			[
				"bse_sing",
				"xtp/include/votca/xtp/bse_singlet.h"
			],
			[
				"bse_s",
				"xtp/src/libxtp/gwbse/bse_singlet.cc"
			],
			[
				"bse_e",
				"xtp/src/libxtp/gwbse/bse_engine.cc"
			],
			[
				"bse_tr",
				"xtp/src/libxtp/gwbse/bse_triplet.cc"
			],
			[
				"bse_eng",
				"xtp/include/votca/xtp/bse_engine.h"
			],
			[
				"bse_oper",
				"xtp/include/votca/xtp/bse_operator.h"
			],
			[
				"bse_si",
				"xtp/src/libxtp/gwbse/bse_singlet.cc"
			],
			[
				"or",
				"xtp/src/libxtp/orbitals.cc"
			],
			[
				"matrix",
				"xtp/include/votca/xtp/matrixfreeoperator.h"
			],
			[
				"eigen.h",
				"tools/include/votca/tools/eigen.h"
			],
			[
				"lin",
				"tools/src/libtools/linalg.cc"
			],
			[
				"bse_a",
				"xtp/include/votca/xtp/bse_matrix_free.h"
			],
			[
				"gwb",
				"xtp/src/libxtp/gwbse/gwbse.cc"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/projects/EigenValues/Davidson/eigen/davidsonEigen.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 205.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
