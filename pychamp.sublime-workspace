{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"kin",
				"kinetic_autograd"
			],
			[
				"si",
				"get_sigma_ones"
			],
			[
				"inv",
				"invCov"
			],
			[
				"inp",
				"input_features"
			],
			[
				"cur",
				"curvature_loss_function"
			],
			[
				"am",
				"amplitude_1d"
			],
			[
				"local",
				"local_energy"
			],
			[
				"loca",
				"local_energy"
			],
			[
				"loa",
				"local_energy"
			],
			[
				"obs",
				"obs_dict"
			],
			[
				"opt",
				"optimizer"
			],
			[
				"we",
				"weight"
			],
			[
				"Pa",
				"Parameter"
			],
			[
				"he",
				"hessian"
			],
			[
				"out",
				"output_features"
			],
			[
				"in",
				"input_features"
			],
			[
				"i",
				"input_features"
			],
			[
				"ndim",
				"ndim_tot"
			],
			[
				"var",
				"variance"
			],
			[
				"o",
				"observalbe"
			],
			[
				"init",
				"init_pos"
			],
			[
				"n",
				"nrj"
			],
			[
				"ga",
				"grad_weight"
			],
			[
				"stat",
				"static_weight"
			],
			[
				"index_",
				"index_up"
			],
			[
				"index",
				"index_up"
			],
			[
				"ci",
				"ci_coeffs"
			],
			[
				"sec",
				"select_configuration_updown_singlet"
			],
			[
				"co",
				"confs_spin_down"
			],
			[
				"confs_",
				"confs_spin_up"
			],
			[
				"confs_sp",
				"confs_spin_up"
			],
			[
				"ge",
				"get_mo"
			],
			[
				"c",
				"config"
			],
			[
				"nr",
				"norb_"
			],
			[
				"gr",
				"ground_state"
			],
			[
				"der",
				"deriv_ao"
			],
			[
				"for",
				"forward"
			],
			[
				"grad",
				"grad_output"
			],
			[
				"re",
				"requires_grad"
			],
			[
				"laye",
				"layer_ao"
			],
			[
				"sa",
				"sampler"
			],
			[
				"NE",
				"NEURAL_PYSCF_WF"
			],
			[
				"nw",
				"nwalker"
			],
			[
				"fo",
				"forward"
			],
			[
				"aci",
				"active_space"
			],
			[
				"daa",
				"dataloader"
			],
			[
				"pa",
				"pairwise_distace"
			],
			[
				"mo",
				"mo_values"
			],
			[
				"sam",
				"sample_list"
			],
			[
				"O",
				"ORBITAL_1S"
			],
			[
				"at",
				"atomic_pos"
			],
			[
				"upp",
				"upper_boud"
			],
			[
				"low",
				"lower_bound"
			],
			[
				"ve",
				"values"
			],
			[
				"plot",
				"plot_density"
			],
			[
				"ene",
				"set_energy_func"
			],
			[
				"new",
				"new_pos"
			],
			[
				"ne",
				"new_pos"
			],
			[
				"dr",
				"drift_func"
			],
			[
				"walkers",
				"walkers"
			],
			[
				"func",
				"func_el"
			],
			[
				"step",
				"step_size"
			],
			[
				"ste",
				"step_size"
			],
			[
				"sum",
				"sum_grad_output"
			],
			[
				"el",
				"elementwise_grad"
			],
			[
				"p",
				"param"
			],
			[
				"ki",
				"kinetic_manual"
			],
			[
				"par",
				"parameters"
			],
			[
				"py",
				"pyCHAMP"
			],
			[
				"Hqp",
				"hqp_mat"
			],
			[
				"Set",
				"SetupHt"
			],
			[
				"dvid",
				"davidson_mf"
			],
			[
				"time",
				"time_singlet"
			],
			[
				"davidson",
				"davidson_mf"
			],
			[
				"set",
				"set_diag"
			],
			[
				"_ei",
				"_eigenvalues"
			],
			[
				"foldr",
				"folder_name"
			],
			[
				"folder",
				"folder_name"
			],
			[
				"MA",
				"MAX"
			],
			[
				"size",
				"size_update"
			],
			[
				"sze",
				"size_update"
			],
			[
				"davds",
				"davidson_update"
			],
			[
				"Matrix",
				"MatrixXd"
			],
			[
				"_eig",
				"_eigenvectors"
			],
			[
				"eig",
				"eigenvalues"
			],
			[
				"iter",
				"iter_max"
			],
			[
				"old",
				"old_dim"
			],
			[
				"Ma",
				"MatrixReplacement"
			],
			[
				"M",
				"MatrixXd"
			],
			[
				"_tmp",
				"_tmp_val"
			],
			[
				"MAr",
				"MatrixXd"
			],
			[
				"cos",
				"conservativeResize"
			],
			[
				"max",
				"maxCoeff"
			],
			[
				"tr",
				"_trash"
			],
			[
				"compare",
				"compare_time"
			],
			[
				"mol",
				"molname"
			],
			[
				"per",
				"percent_converged"
			],
			[
				"root",
				"root_converged"
			],
			[
				"res",
				"res_norm"
			],
			[
				"reor",
				"reorder_coeffs"
			],
			[
				"blo",
				"block"
			],
			[
				"_co",
				"_coeff_Hd2"
			],
			[
				"Triplet",
				"Triplet_TDA"
			],
			[
				"Sin",
				"Singlet_TDA"
			],
			[
				"coef",
				"_coeff_Hqp"
			],
			[
				"BE",
				"BSE_OPERATOR"
			],
			[
				"_",
				"_dpr_correction"
			],
			[
				"matrix",
				"matrixfree"
			],
			[
				"matri",
				"matrixfree"
			],
			[
				"Dav",
				"DavidsonSolver"
			],
			[
				"da",
				"davidson_correction"
			],
			[
				"david",
				"davidson_correction"
			],
			[
				"N",
				"N"
			],
			[
				"dav",
				"davidson_solver"
			],
			[
				"dia",
				"digaonal_dominant"
			],
			[
				"V",
				"V"
			],
			[
				"jocc",
				"jocc_linsolve"
			],
			[
				"Ht",
				"Ht"
			],
			[
				"BSE_",
				"BSE_OPERATOR"
			],
			[
				"_coe",
				"_coeff_Hd2"
			],
			[
				"get",
				"get_full_matrix"
			],
			[
				"_eigen",
				"_eigenvectors"
			],
			[
				"e",
				"eigenvectors"
			],
			[
				"Vec",
				"VectorXd"
			],
			[
				"_bse",
				"_bse_singlet_coefficients"
			],
			[
				"solve",
				"solve_hermitian"
			],
			[
				"martix",
				"MatrixXfd"
			],
			[
				"vect",
				"VectorXfd"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import torch\nfrom torch import nn\nfrom torch.utils.data import Dataset\nfrom torch.autograd import Variable\n\nclass QMCDataSet(Dataset):\n\n    def __init__(self, data):\n        self.data = data\n\n    def __len__(self):\n        return self.data.shape[0]\n\n    def __getitem__(self,index):\n        return self.data[index,:]\n\nclass QMCLoss(nn.Module):\n\n    def __init__(self,wf,method='variance'):\n\n        super(QMCLoss,self).__init__()\n        self.wf = wf\n        self.method = method\n\n    def forward(self,vals,pos):\n\n        if self.method == 'variance':\n            loss = self.wf.variance(pos)\n\n        elif self.method == 'energy':\n            loss = self.wf.energy(pos)\n\n        elif self.method == 'density':\n            loss = 1./(torch.exp(torch.mean(vals**2))+1)\n\n        elif callable(self.method):\n            loss = nn.MSELoss()\n            target = torch.tensor(self.method(pos.detach().numpy()))\n            return loss(vals,target)\n\n        else:\n            raise ValueError('method must be variance, energy or callable')\n\n        return loss",
			"file": "pyCHAMP/solver/torch_utils.py",
			"file_size": 1526,
			"file_write_time": 132048174523822900,
			"settings":
			{
				"buffer_size": 1054,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import autograd.numpy as np\n\nfrom pyCHAMP.wavefunction.wf_base import WF\n\nfrom pyCHAMP.optimizer.minimize import MINIMIZE\n#from pyCHAMP.optimizer.swarm import SWARM\n\nfrom pyCHAMP.sampler.metropolis import METROPOLIS\nfrom pyCHAMP.sampler.pymc3 import PYMC3\n#from pyCHAMP.sampler.hamiltonian import HAMILTONIAN\nfrom pyCHAMP.solver.vmc import VMC\n\n\n\n\n\nclass HarmOsc2D(WF):\n\n    def __init__(self,nelec=1,ndim=2):\n        WF.__init__(self, nelec, ndim)\n\n    def values(self,param,pos):\n\n        b0 = param[0]\n        pos = pos.T\n        v =   np.exp(- b0 *(pos[0])**2) * np.exp(- b0 *(pos[1])**2)\n        return v\n\n    def nuclear_potential(self,pos):\n        return np.sum(0.5*pos**2,1)\n\n    def electronic_potential(self,pos):\n        return 0\n\n\nif __name__ == \"__main__\":\n\n    wf = HarmOsc2D(nelec=1, ndim=2)\n    sampler = METROPOLIS(nwalkers=1000, nstep=1000, step_size = 3, nelec=1, ndim=2, domain = {'min':-2,'max':2})\n    #sampler = PYMC3(nwalkers=100,ndim=2)\n\n    #sampler = HAMILTONIAN(nwalkers=1000, nstep=1000, step_size = 3, nelec=1, ndim=1)\n    optimizer = MINIMIZE(method='bfgs', maxiter=25, tol=1E-4)\n\n    #optimizer = SWARM( maxiter=25)\n    \n    # VMC solver\n    vmc = VMC(wf=wf, sampler=sampler, optimizer=optimizer)\n\n    # single point\n    opt_param = [0.5]   \n    pos,e,s = vmc.single_point(opt_param)\n    print('Energy   : ', e)\n    print('Variance : ', s)\n    vmc.plot_density(pos)\n\n    # optimization\n    # init_param = [1.]\n    # vmc.optimize(init_param)\n    # vmc.plot_history()\n    \n\n\n\n    # metro = METROPOLIS(nwalkers=1000, nstep=1000, step_size = 3, nelec=1, ndim=1, domain = {'min':-2,'max':2})\n    # optimizer = MINIMIZE(method='bfgs', maxiter=25, tol=1E-4)\n\n\n\n    # vmc = VMC(wf=wf, sampler=metro, optimizer=optimizer)\n    # pos = vmc.sample(opt_param)\n\n\n    # diff = DIFFUSION(nwalkers=1000, nstep=1, step_size = 0.5, nelec=1, ndim=1, domain = {'min':-2,'max':2})\n    # diff.set_initial_guess(pos)\n\n    # dmc = DMC(wf=wf, sampler=diff, optimizer=None)\n    # pos,e,s = dmc.single_point(opt_param)\n    # dmc.plot_density(pos)\n\n\n\n\n    # sampler = METROPOLIS(nwalkers=1000, nstep=1000, step_size = 3, nelec=1, ndim=1, domain = {'min':-2,'max':2})\n    # optimizer = MINIMIZE(method='bfgs', maxiter=25, tol=1E-4)\n    # vmc = VMC(wf=wf, sampler=sampler, optimizer=optimizer)\n    # x0 = [1.25]\n    # vmc.optimize(x0)\n\n    # plt.plot(vmc.history['energy'])\n    # plt.plot(vmc.history['variance'])\n    # plt.show()\n\n\n",
			"file": "example/ho2d.py",
			"file_size": 2435,
			"file_write_time": 132049725118947831,
			"settings":
			{
				"buffer_size": 2435,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import torch\nfrom torch import nn\nfrom torch.autograd import Variable\nimport torch.nn.functional as F\nfrom torch.nn.utils.weight_norm import weight_norm\nimport torch.optim as optim\n\nfrom pyCHAMP.wavefunction.neural_wf_base import NEURAL_WF_BASE\nfrom pyCHAMP.wavefunction.rbf import RBF1D as RBF\nfrom pyCHAMP.solver.deepqmc import DeepQMC\nfrom pyCHAMP.sampler.metropolis import METROPOLIS_TORCH as METROPOLIS\nfrom pyCHAMP.solver.mesh import adaptive_mesh_1d as mesh\nfrom pyCHAMP.solver.mesh import torchify\n\nfrom pyCHAMP.solver.plot import plot_results_1d as plot_results\nfrom pyCHAMP.solver.plot import plotter1d\n\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\n\nclass RBF_HO1D(NEURAL_WF_BASE):\n\n    def __init__(self,nelec=1,ndim=1,ncenter=51):\n        super(RBF_HO1D,self).__init__(nelec,ndim)\n\n        # get the RBF centers \n        self.centers = torch.linspace(-5,5,ncenter)\n        #_func = torchify(self.nuclear_potential)\n        #self.centers = torch.tensor(mesh(_func,-5,5,ncenter,loss='curvature'))\n        self.ncenter = len(self.centers)\n\n        # define the RBF layer\n        self.rbf = RBF(self.ndim_tot, self.ncenter,centers=self.centers, opt_centers=False)\n        \n        # define the fc layer\n        self.fc = nn.Linear(self.ncenter, 1, bias=False)\n\n        # initiaize the fc layer\n        self.fc.weight.data.fill_(1.)\n        #self.fc.weight.data[0,1] = 1.\n        #nn.init.uniform_(self.fc.weight,0,1)\n\n    def forward(self,x):\n        ''' Compute the value of the wave function.\n        for a multiple conformation of the electrons\n\n        Args:\n            parameters : variational param of the wf\n            pos: position of the electrons\n\n        Returns: values of psi\n        '''\n\n        batch_size = x.shape[0]\n        x = x.view(batch_size,-1,self.ndim)\n        x = self.rbf(x)\n        x = self.fc(x)\n        return x.view(-1,1)\n\n    def nuclear_potential(self,pos):\n        '''Compute the potential of the wf points\n        Args:\n            pos: position of the electron\n\n        Returns: values of V * psi\n        '''\n        return (0.5*pos**2).flatten().view(-1,1)\n\n    def electronic_potential(self,pos):\n        '''Compute the potential of the wf points\n        Args:\n            pos: position of the electron\n\n        Returns: values of Vee * psi\n        '''\n        return 0\n\ndef ho1d_sol(pos):\n    '''Analytical solution of the 1D harmonic oscillator.'''\n    vn = np.exp(-0.5*pos**2)\n    return vn/np.linalg.norm(vn)\n\n# wavefunction\nwf = RBF_HO1D(ndim=1,nelec=1,ncenter=11)\n\n#sampler\nsampler = METROPOLIS(nwalkers=250, nstep=1000, \n                     step_size = 3., nelec = wf.nelec, \n                     ndim = wf.ndim, domain = {'min':-5,'max':5})\n\n# optimizer\nopt = optim.Adam(wf.parameters(),lr=0.005)\n\n# network\nnet = DeepQMC(wf=wf,sampler=sampler,optimizer=opt)\npos = None\nobs_dict = None\n\nplt.ion()\ndomain = {'xmin':-5.,'xmax':5.}\nplot1D = plotter1d(wf,domain,50,sol=ho1d_sol)\n#fig = plt.figure()\n\nfor i in range(1):\n\n    net.wf.fc.weight.requires_grad = True\n    net.wf.rbf.centers.requires_grad = False\n\n    pos,obs_dict = net.train(250,\n             batchsize=250,\n             pos = pos,\n             obs_dict = obs_dict,\n             resample=100,\n             ntherm=-1,\n             loss = 'variance',\n             plot=plot1D)\n\n    # net.wf.fc.weight.requires_grad = False\n    # net.wf.rbf.centers.requires_grad = True\n\n    # pos,obs_dict = net.train(10,\n    #          batchsize=250,\n    #          pos = pos,\n    #          obs_dict = obs_dict,\n    #          resample=100,\n    #          ntherm=-1,\n    #          loss = 'variance',\n    #          sol=ho1d_sol,\n    #          fig=fig)\n\nplot_results(net,obs_dict,ho1d_sol,e0=0.5)\n\n\n\n\n\n\n",
			"file": "example/nn_ho1d.py",
			"file_size": 3709,
			"file_write_time": 132049128264586082,
			"settings":
			{
				"buffer_size": 3710,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/solver/plot.py",
			"settings":
			{
				"buffer_size": 7338,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/solver/mesh.py",
			"settings":
			{
				"buffer_size": 1594,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/wavefunction/neural_wf_base.py",
			"settings":
			{
				"buffer_size": 3279,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/wavefunction/rbf.py",
			"settings":
			{
				"buffer_size": 3819,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/wavefunction/neural_pyscf_wf_base.py",
			"settings":
			{
				"buffer_size": 7093,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/sampler/metropolis.py",
			"settings":
			{
				"buffer_size": 4339,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/wavefunction/wf_base.py",
			"settings":
			{
				"buffer_size": 6719,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/sampler/walkers.py",
			"settings":
			{
				"buffer_size": 1866,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "example/nn_morse.py",
			"settings":
			{
				"buffer_size": 3685,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/solver/deepqmc.py",
			"settings":
			{
				"buffer_size": 3889,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "pyCHAMP/solver/solver_base.py",
			"settings":
			{
				"buffer_size": 2113,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "example/nn_ho2d.py",
			"settings":
			{
				"buffer_size": 3436,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"clan",
				"Clang Format: Format Selection"
			],
			[
				"cla",
				"Clang Format: Format Selection"
			],
			[
				"cl",
				"Clang Format: Format Selection"
			],
			[
				"CL",
				"Clang Format: Format Selection"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/nicolas/Documents/projects/QMC/pyCHAMP",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pics"
	],
	"file_history":
	[
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/ho1d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/morse1d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_double_well.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/wf_pyscf.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/deepqmc1d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/solver_base.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/vmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/nn_wf_base.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/dqmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/dqmc_mol.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/neural_net.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/PointNet.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/wave_modules.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/neural_pyscf_wf_base.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler/sampler_base.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/nn_pyscf.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler/walkers.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/wf_base.py",
		"/home/nicolas/Documents/tutorial/pytorch/pyscf_ao_function.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/neural_wf_base.py",
		"/home/nicolas/Documents/tutorial/pytorch/own_func.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/ho3d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/ho2d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/sand_box.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/h2o.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/tests/test_ho3d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/linear.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/tests/test_ho1d.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler/hamiltonian.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/.travis.yml",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/setup.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/swarm.py",
		"/home/nicolas/Documents/tutorial/pyswarm/test.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/minimize.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler/pymc3.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/h2.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/tests/test_lint.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler/metropolis.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/wavefunction/jastrow.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/.eggs/Sphinx-2.0.1-py3.7.egg/sphinx/themes/basic/static/jquery-3.2.1.js",
		"/home/nicolas/Documents/projects/QMC/rbm_ansatz.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/opt_base.py",
		"/home/nicolas/Documents/tutorial/autograd/test.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/example/hydrogen.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/sampler/diffusion.py",
		"/home/nicolas/Documents/pyscf/pyscf/lib/CMakeLists.txt",
		"/home/nicolas/Documents/projects/votca/CMakeLists.txt",
		"/home/nicolas/Documents/projects/votca/xtp/CMakeLists.txt",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/solver/dmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/README.md",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/requirements.txt",
		"/home/nicolas/Documents/tutorial/pyhmc/test.py",
		"/home/nicolas/Documents/tutorial/pyMC3/test.py",
		"/home/nicolas/Documents/tutorial/pyMC3/tesa",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/vmc/vmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/dmc/dmc.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/diffuser/diffuser.py",
		"/home/nicolas/Documents/projects/QMC/pyCHAMP/pyCHAMP/optimizer/test.py",
		"/home/nicolas/Documents/projects/xtp_benchmark/geometries_tol_normal_update_safe_matrix_free/read_mem.py",
		"/home/nicolas/Documents/projects/votca/tools/include/votca/tools/property.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/qmstate.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/matrixfreeoperator.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/davidsonsolver.cc",
		"/home/nicolas/Documents/projects/xtp-tutorials/tools/dftgwbse_CH4/run.sh",
		"/home/nicolas/Documents/projects/xtp_benchmark/geometries_tol_normal_update_full/unsaturated_aliphatic_hydrocarbons/ethene/dftgwbse_davidson.log",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bse.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/gwbse.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/aobasis.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/matrixfreeoperator.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/orbitals.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/gwbse.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/tests/test_davidson.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/tests/test_bse.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/eigen.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/tests/test_bse_operator.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/tests/CMakeLists.txt",
		"/home/nicolas/Documents/projects/votca/ctp/src/libctp/toolfactory.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/tools/densityanalysis.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/tools/coupling.h",
		"/home/nicolas/Documents/projects/votca/xtp/share/packages/mbgft.xml",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bse_operator.cc",
		"/home/nicolas/Documents/projects/votca/xtp/README.md",
		"/home/nicolas/Documents/projects/votca/xtp/CODE_OF_CONDUCT.md",
		"/home/nicolas/Documents/projects/votca/xtp/CHANGELOG.md",
		"/home/nicolas/Documents/projects/votca/xtp/scripts/xtp_basisset.in",
		"/home/nicolas/Documents/projects/votca/build/xtp/scripts/xtp_makeauxbasis",
		"/home/nicolas/Documents/projects/votca/build/xtp/scripts/xtp_update_exciton",
		"/home/nicolas/Documents/projects/votca/xtp/.travis.yml",
		"/home/nicolas/Documents/projects/votca/xtp/.gitlab-ci.yml",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/tools/excitoncoupling.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/tools/gencube.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/CMakeLists.txt",
		"/home/nicolas/Documents/projects/PINNs/main/continuous_time_inference (Schrodinger)/Schrodinger.py",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/test_operator.h",
		"/home/nicolas/Documents/projects/votca/csg/.codecov.yml",
		"/home/nicolas/Documents/projects/votca/csg/.gitlab-ci.yml",
		"/home/nicolas/Documents/projects/votca/xtp/scripts/xtp_makeauxbasis.in",
		"/home/nicolas/Documents/projects/votca/xtp/scripts/xtp_update_exciton.in",
		"/home/nicolas/Documents/projects/votca/xtp/src/tools/CMakeLists.txt",
		"/home/nicolas/Documents/projects/xtp_benchmark/geometries/unsaturated_aliphatic_hydrocarbons/ethene_test/run.sh",
		"/home/nicolas/Documents/projects/xtp_benchmark/read_data.py",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/src/DavidsonSolver.cpp",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/src/DavidsonSolver.hpp",
		"/home/nicolas/Documents/projects/champ/vmc/regterg.f90",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/python/davidson",
		"/home/nicolas/Documents/projects/votca/CMakeModules/BuildModules.cmake",
		"/home/nicolas/Documents/projects/votca/CMakeModules/FileExists.cmake",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/src/main.cpp",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/src/DavidsonOperator.hpp",
		"/home/nicolas/Documents/projects/EigenValues/Davidson/eigen/src/DavidsonOperator.cpp",
		"/home/nicolas/Documents/projects/xtp_benchmark/geometries/nucleobases/adenine_test/run.sh",
		"/proc/sys/kernel/perf_event_paranoid",
		"/home/nicolas/Documents/projects/LinearSystem/CG/python/cg.py",
		"/home/nicolas/Documents/projects/votca/xtp/src/tests/test_bse_davidson.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bse.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/tests/test_adiis.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/orbitals.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bse_engine.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bse_engine.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/tools/dftgwbse.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/jobcalculators/eqm.cc",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bse_singlet.h",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bse_triplet.cc",
		"/home/nicolas/Documents/projects/votca/xtp/src/libxtp/gwbse/bse_singlet.cc",
		"/home/nicolas/votca/share/votca/xtp/packages/mbgft.xml",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bse_triplet.h",
		"/home/nicolas/Documents/projects/votca/xtp/include/votca/xtp/bse_operator.h",
		"/home/nicolas/Documents/projects/votca/tools/src/libtools/linalg.cc"
	],
	"find":
	{
		"height": 22.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"            \n",
			"print",
			"value(",
			"self.parameters"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pyCHAMP/solver/torch_utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1054,
						"regions":
						{
						},
						"selection":
						[
							[
								107,
								107
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "example/ho2d.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2435,
						"regions":
						{
						},
						"selection":
						[
							[
								344,
								344
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "example/nn_ho1d.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3710,
						"regions":
						{
						},
						"selection":
						[
							[
								1161,
								1161
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "pyCHAMP/solver/plot.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7338,
						"regions":
						{
						},
						"selection":
						[
							[
								6442,
								6442
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2028.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pyCHAMP/solver/mesh.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1594,
						"regions":
						{
						},
						"selection":
						[
							[
								1330,
								1330
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "pyCHAMP/wavefunction/neural_wf_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3279,
						"regions":
						{
						},
						"selection":
						[
							[
								2177,
								2177
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 351.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "pyCHAMP/wavefunction/rbf.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3819,
						"regions":
						{
						},
						"selection":
						[
							[
								2798,
								2798
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 741.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "pyCHAMP/wavefunction/neural_pyscf_wf_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7093,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "pyCHAMP/sampler/metropolis.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4339,
						"regions":
						{
						},
						"selection":
						[
							[
								1987,
								1987
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 234.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "pyCHAMP/wavefunction/wf_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6719,
						"regions":
						{
						},
						"selection":
						[
							[
								4203,
								4203
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1677.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "pyCHAMP/sampler/walkers.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1866,
						"regions":
						{
						},
						"selection":
						[
							[
								772,
								772
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				}
			]
		},
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 6,
					"file": "pyCHAMP/wavefunction/rbf.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3819,
						"regions":
						{
						},
						"selection":
						[
							[
								302,
								302
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 78.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "example/nn_morse.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3685,
						"regions":
						{
						},
						"selection":
						[
							[
								294,
								294
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "pyCHAMP/solver/deepqmc.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3889,
						"regions":
						{
						},
						"selection":
						[
							[
								2302,
								2302
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 936.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "pyCHAMP/solver/solver_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2113,
						"regions":
						{
						},
						"selection":
						[
							[
								902,
								902
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 170.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "example/nn_ho2d.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3436,
						"regions":
						{
						},
						"selection":
						[
							[
								3074,
								3074
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pyCHAMP/solver/mesh.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1594,
						"regions":
						{
						},
						"selection":
						[
							[
								1408,
								1408
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 26.0
	},
	"pinned_build_system": "",
	"project": "pychamp.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ho2",
				"example/ho2d.py"
			],
			[
				"wf_ba",
				"pyCHAMP/wavefunction/wf_base.py"
			],
			[
				"ho",
				"example/ho2d.py"
			],
			[
				"mes",
				"pyCHAMP/solver/mesh.py"
			],
			[
				"nn_m",
				"example/nn_morse.py"
			],
			[
				"nnh",
				"example/nn_ho1d.py"
			],
			[
				"mo",
				"example/morse1d.py"
			],
			[
				"solve",
				"pyCHAMP/solver/solver_base.py"
			],
			[
				"vm",
				"pyCHAMP/solver/vmc.py"
			],
			[
				"waf",
				"pyCHAMP/wavefunction/wf_base.py"
			],
			[
				"ho1",
				"example/ho1d.py"
			],
			[
				"wa",
				"pyCHAMP/sampler/walkers.py"
			],
			[
				"metr",
				"pyCHAMP/sampler/metropolis.py"
			],
			[
				"neur",
				"pyCHAMP/solver/neural_net.py"
			],
			[
				"Po",
				"pyCHAMP/optimizer/PointNet.py"
			],
			[
				"neua",
				"pyCHAMP/wavefunction/neural_pyscf_wf_base.py"
			],
			[
				"ne",
				"pyCHAMP/solver/neural_net.py"
			],
			[
				"h2",
				"example/h2.py"
			],
			[
				"sol",
				"pyCHAMP/solver/solver_base.py"
			],
			[
				"mi",
				"pyCHAMP/optimizer/minimize.py"
			],
			[
				"ho3d",
				"example/ho3d.py"
			],
			[
				"neu",
				"pyCHAMP/wavefunction/neural_pyscf_wf_base.py"
			],
			[
				"wf",
				"pyCHAMP/wavefunction/wf_base.py"
			],
			[
				"sa",
				"example/sand_box.py"
			],
			[
				"wf_",
				"pyCHAMP/wavefunction/wf_pyscf.py"
			],
			[
				"pysc",
				"pyCHAMP/wavefunction/wf_pyscf.py"
			],
			[
				"wal",
				"pyCHAMP/sampler/walkers.py"
			],
			[
				"neru",
				"pyCHAMP/wavefunction/neural_wf_base.py"
			],
			[
				"neura",
				"pyCHAMP/solver/neural_net.py"
			],
			[
				"sam",
				"pyCHAMP/sampler/sampler_base.py"
			],
			[
				"mtr",
				"pyCHAMP/sampler/metropolis.py"
			],
			[
				"ho3",
				"example/ho3d.py"
			],
			[
				"mini",
				"pyCHAMP/optimizer/minimize.py"
			],
			[
				"opt",
				"pyCHAMP/optimizer/opt_base.py"
			],
			[
				"pys",
				"pyCHAMP/wavefunction/wf_pyscf.py"
			],
			[
				"wf_pys",
				"pyCHAMP/wavefunction/wf_pyscf.py"
			],
			[
				"wf_bas",
				"pyCHAMP/wavefunction/wf_base.py"
			],
			[
				".tr",
				".travis.yml"
			],
			[
				"tes",
				"tests/test_ho3d.py"
			],
			[
				"solv",
				"pyCHAMP/solver/solver_base.py"
			],
			[
				"min",
				"pyCHAMP/optimizer/minimize.py"
			],
			[
				"w",
				"pyCHAMP/wavefunction/wf_base.py"
			],
			[
				"nf",
				"~/Documents/tutorial/pyMC3/nf.py"
			],
			[
				"hy",
				"example/hydrogen.py"
			],
			[
				"ho\t",
				"example/ho3d.py"
			],
			[
				"vmc",
				"pyCHAMP/solver/vmc.py"
			],
			[
				"ham",
				"pyCHAMP/sampler/hamiltonian.py"
			],
			[
				"h",
				"example/ho1d.py"
			],
			[
				"lin",
				"pyCHAMP/optimizer/linear.py"
			],
			[
				"R",
				"README.md"
			],
			[
				"so",
				"pyCHAMP/solver/solver_base.py"
			],
			[
				"op",
				"pyCHAMP/optimizer/opt_base.py"
			],
			[
				"di",
				"pyCHAMP/sampler/diffusion.py"
			],
			[
				"test_bse",
				"xtp/src/tests/test_bse.cc"
			],
			[
				"",
				"xtp/src/tests/test_bse_operator.cc"
			],
			[
				"davids",
				"xtp/include/votca/xtp/davidsonsolver.h"
			],
			[
				"da",
				"xtp/src/libxtp/davidsonsolver.cc"
			],
			[
				"bse.cc",
				"xtp/src/libxtp/gwbse/bse.cc"
			],
			[
				"qmsta",
				"xtp/include/votca/xtp/qmstate.h"
			],
			[
				"bse.c",
				"xtp/src/libxtp/gwbse/bse.cc"
			],
			[
				"orbitals",
				"ctp/include/votca/ctp/orbitals.h"
			],
			[
				"test_d",
				"xtp/src/tests/test_davidson.cc"
			],
			[
				"dav",
				"xtp/include/votca/xtp/davidsonsolver.h"
			],
			[
				"test_bs",
				"xtp/src/tests/test_bse_operator.cc"
			],
			[
				"matr",
				"xtp/src/libxtp/matrixfreeoperator.cc"
			],
			[
				"test",
				"xtp/src/tests/test_bse.cc"
			],
			[
				"gw",
				"xtp/src/libxtp/gwbse/gwbse.cc"
			],
			[
				"bse",
				"xtp/include/votca/xtp/bse.h"
			],
			[
				"bse_op",
				"xtp/include/votca/xtp/bse_operator.h"
			],
			[
				"bse_",
				"xtp/src/libxtp/gwbse/bse_operator.cc"
			],
			[
				"test_",
				"xtp/src/tests/test_bse.cc"
			],
			[
				"bse.h",
				"xtp/include/votca/xtp/bse.h"
			],
			[
				"test_d\t",
				"xtp/src/tests/test_davidson.cc"
			],
			[
				"bse.",
				"xtp/src/libxtp/gwbse/bse.cc"
			],
			[
				"matri",
				"xtp/include/votca/xtp/matrixfreeoperator.h"
			],
			[
				"bse_o",
				"xtp/include/votca/xtp/bse_operator.h"
			],
			[
				".cod",
				"csg/.codecov.yml"
			],
			[
				"exc",
				"xtp/src/libxtp/tools/excitoncoupling.h"
			],
			[
				"den",
				"xtp/src/libxtp/tools/densityanalysis.h"
			],
			[
				"xtp_up",
				"build/xtp/scripts/xtp_update_exciton"
			],
			[
				"xtp_ma",
				"build/xtp/scripts/xtp_makeauxbasis"
			],
			[
				"xtp_bas",
				"xtp/scripts/xtp_basisset.in"
			],
			[
				".gitla",
				"csg/.gitlab-ci.yml"
			],
			[
				".cove",
				"csg/.codecov.yml"
			],
			[
				"gen",
				"xtp/src/libxtp/tools/gencube.h"
			],
			[
				"exci",
				"xtp/src/libxtp/tools/excitoncoupling.h"
			],
			[
				"too",
				"ctp/src/libctp/toolfactory.cc"
			],
			[
				"dens",
				"xtp/src/libxtp/tools/densityanalysis.h"
			],
			[
				"gwbse",
				"xtp/src/libxtp/gwbse/gwbse.cc"
			],
			[
				"david",
				"xtp/include/votca/xtp/davidsonsolver.h"
			],
			[
				"davidso",
				"xtp/include/votca/xtp/davidsonsolver.h"
			],
			[
				"gwbs",
				"xtp/src/libxtp/gwbse/gwbse.cc"
			],
			[
				"eig",
				"xtp/include/votca/xtp/eigen.h"
			],
			[
				"bse_ope",
				"xtp/include/votca/xtp/bse_operator.h"
			],
			[
				"mb",
				"xtp/share/packages/mbgft.xml"
			],
			[
				"bse_tri",
				"xtp/src/libxtp/gwbse/bse_triplet.cc"
			],
			[
				"bse_sing",
				"xtp/include/votca/xtp/bse_singlet.h"
			],
			[
				"bse_s",
				"xtp/src/libxtp/gwbse/bse_singlet.cc"
			],
			[
				"bse_e",
				"xtp/src/libxtp/gwbse/bse_engine.cc"
			],
			[
				"bse_tr",
				"xtp/src/libxtp/gwbse/bse_triplet.cc"
			],
			[
				"bse_eng",
				"xtp/include/votca/xtp/bse_engine.h"
			],
			[
				"bse_oper",
				"xtp/include/votca/xtp/bse_operator.h"
			],
			[
				"bse_si",
				"xtp/src/libxtp/gwbse/bse_singlet.cc"
			],
			[
				"or",
				"xtp/src/libxtp/orbitals.cc"
			],
			[
				"matrix",
				"xtp/include/votca/xtp/matrixfreeoperator.h"
			],
			[
				"eigen.h",
				"tools/include/votca/tools/eigen.h"
			],
			[
				"bse_a",
				"xtp/include/votca/xtp/bse_matrix_free.h"
			],
			[
				"gwb",
				"xtp/src/libxtp/gwbse/gwbse.cc"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Documents/projects/EigenValues/Davidson/eigen/davidsonEigen.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 232.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
